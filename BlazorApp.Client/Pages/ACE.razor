@page "/"
@rendermode InteractiveAuto
@using Share.Provider
@using Share.Provider.DbModels
@using Google.Cloud.Firestore
@using System.Text.Json
@inject FirestoreProvider firestoreProvider
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenLayout Style="position: relative;grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="0">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                <RadzenLabel Text="Header" />
            </RadzenStack>
            <RadzenStack AlignItems="AlignItems.Center" class="rz-m-2">
                <a href="https://github.com/radzenhq/radzen-blazor" title="GitHub" target="_blank" class="rz-mx-4">
                    <svg width="24" height="24" viewBox="0 0 512 499.36" xmlns="http://www.w3.org/2000/svg">
                        <title>GitHub</title>
                        <path fill="currentColor" fill-rule="evenodd" d="M256 0C114.64 0 0 114.61 0 256c0 113.09 73.34 209 175.08 242.9 12.8 2.35 17.47-5.56 17.47-12.34 0-6.08-.22-22.18-.35-43.54-71.2 15.49-86.2-34.34-86.2-34.34-11.64-29.57-28.42-37.45-28.42-37.45-23.27-15.84 1.73-15.55 1.73-15.55 25.69 1.81 39.21 26.38 39.21 26.38 22.84 39.12 59.92 27.82 74.5 21.27 2.33-16.54 8.94-27.82 16.25-34.22-56.84-6.43-116.6-28.43-116.6-126.49 0-27.95 10-50.8 26.35-68.69-2.63-6.48-11.42-32.5 2.51-67.75 0 0 21.49-6.88 70.4 26.24a242.65 242.65 0 0 1 128.18 0c48.87-33.13 70.33-26.24 70.33-26.24 14 35.25 5.18 61.27 2.55 67.75 16.41 17.9 26.31 40.75 26.31 68.69 0 98.35-59.85 120-116.88 126.32 9.19 7.9 17.38 23.53 17.38 47.41 0 34.22-.31 61.83-.31 70.23 0 6.85 4.61 14.81 17.6 12.31C438.72 464.97 512 369.08 512 256.02 512 114.62 397.37 0 256 0z"></path>
                    </svg>
                </a>
                <RadzenStack Gap="1" />
            </RadzenStack>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar Responsive="false" @bind-Expanded="@sidebarExpanded" style="position: absolute; z-index: 3">
        <RadzenStack AlignItems="AlignItems.End" Class="rz-p-2">
            <RadzenButton Icon="west" Variant="Variant.Text" ButtonStyle="ButtonStyle.Secondary" Click="@(() => sidebarExpanded = false)" />
        </RadzenStack>
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Icon="home" Path="" />
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <PageTitle>ACE</PageTitle>
        <h1>ACE</h1>
        @if (questions == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <RadzenNumeric @bind-Value=@questionCount Min="1" Max="60" />
            <RadzenButton Click=@(args => ButtonClicked()) Text="Refresh" ButtonStyle="ButtonStyle.Primary" />
            <RadzenButton Click=@(args => Submit()) Text="Submit" ButtonStyle="ButtonStyle.Primary" />
            @foreach (var question in questions)
            {
                <RadzenFieldset Text=@question.Content.Substring(0, 3)>
                    <div class="mb-3">
                        <RadzenText TextStyle="TextStyle.H5" Style="line-height: 1.5;">@question.Content.Substring(3)</RadzenText>
                            <RadzenRadioButtonList @bind-Value=@question.CurrentAnswer Orientation=Orientation.Vertical>
                                <Items>
                                    @for (int i = 0; i < 4; i++)
                                {
                                    if (!showAnswer)
                                    {
                                        <RadzenRadioButtonListItem Text=@question.GetType().GetProperty("Option"+ (i + 1).ToString())!.GetValue(question, null)!.ToString()
                                                                   Value="@(((char)('A'+i)).ToString())"
                                                                   class=@("rz-p-1 rz-border-radius" +(question.CurrentAnswer?.ToString() == ((char)('A'+ i)).ToString()?" rz-background-color-secondary":"")) />
                                    }
                                    else
                                    {
                                        <RadzenRadioButtonListItem Text=@question.GetType().GetProperty("Option"+ (i + 1).ToString())!.GetValue(question, null)!.ToString()
                                                                   Value="@(((char)('A'+i)).ToString())"
                                                                   class=@("rz-p-1 rz-border-radius" +
                                                                   (question.CurrentAnswer?.ToString() == ((char)('A'+ i)).ToString()?
                                                   question.CurrentAnswer?.ToString()==question.Answer? " rz-background-color-success":" rz-background-color-danger":
                                                   question.Answer?.ToString()==((char)('A'+ i)).ToString()?" rz-background-color-success":"")) />
                                    }

                                }
                            </Items>
                        </RadzenRadioButtonList>
                    </div>
                </RadzenFieldset>
                <p></p>
                <hr style="height:2px">
            }


            @*     <table class="table">
        <thead>
        <tr>
        <th>Content</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var question in questions)
        {
        <tr>
        <td>@question.Content</td>
        </tr>0
        }
        </tbody>
        </table> *@
        }
        @if (sidebarExpanded)
        {
            <div @onclick="@(() => sidebarExpanded = false)" class="rz-dialog-mask" style="position: absolute; z-index: 2"></div>
        }
    </RadzenBody>

</RadzenLayout>



@code {
    bool sidebarExpanded = false;
    private IReadOnlyCollection<Question>? questions;
    bool showAnswer = false;
    int questionCount = 1;
    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        // await firestoreProvider.AddOrUpdate<Question>(new Question(), cancellationTokenSource.Token);
        // questions = await firestoreProvider.GetAll<Question>();
        // questions = questions.OrderBy(t => t.Number).ToList();
        await ButtonClicked();
    }
    async Task ButtonClicked()
    {
        if (questions?.Any(t => t.CurrentAnswer != null) == true)
        {
            var confirmResult = await DialogService.Confirm("There are answered questions, do you want to refresh?", "Warning", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
            if (confirmResult == false)
                return;
        }
        showAnswer = false;
        int[] randomNumbers = Enumerable.Range(0, 31).OrderBy(x => Guid.NewGuid()).Take(questionCount).ToArray();

        IEnumerable<int> enumerable = randomNumbers as IEnumerable<int>;

        questions = await firestoreProvider.WhereIn<Question, int>("Number", enumerable);
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Info", Detail = "Refresh success" });
    }
    async Task Submit()
    {

        if (questions?.Any(t => t.CurrentAnswer == null) == true)
        {
            var confirmResult = await DialogService.Confirm("There are unfinished questions, do you want to view the answers?", "Warning", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CssClass = "rz-color-danger" });
            if (confirmResult == true)
                showAnswer = true;
        }
        else
        {
            var confirmResult = await DialogService.Confirm("Do you want to view the answers?", "Warning", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
            if (confirmResult == true)
                showAnswer = true;
        }
    }
}
